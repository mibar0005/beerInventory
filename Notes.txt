Programming to interfaces makes it easier to follow multiple SOLID principles.

Single Responsibility Principle: By creating small interfaces, we define obvious responsibilities for implementing
    classes. It makes it easier to follow the SRP, especially when we make our classes implement only a handful or
    even a single interface.
Open/Closed Principle: With loose coupling and hidden implementations, following OCP is also more straightforward.
    Since the client code doesn’t rely on the implementation, we can introduce additional subclasses as needed.
Liskov Substitution Principle: LSP is not directly connected to this technique. However, we must take care
    when we’re designing our inheritance hierarchy to follow this principle, too.
Interface Segregation Principle: ISP isn’t a result but a good practice to follow when we’re programming interfaces.
    Note that we already talked about the importance of defining small, well-defined responsibilities.
    Those notes were hidden hints to follow ISP.
Dependency Inversion Principle: By relying on abstractions, we already did the majority of the work to follow DIP.
    The last thing to do is to expect dependencies from an external party instead of instantiating them internally.
    Note that with only depending on interfaces, this last step is already inferred. We cannot instantiate a class
    without